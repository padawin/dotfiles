window:
  title: Terminal
  dynamic_title: true

font:
  normal:
    family: Operator Mono
    style: Semi-Light

  bold:
    family: Operator Mono
    style: Bold

  italic:
    family: Operator Mono
    style: Italic

  bold_italic:
    family: Operator Mono
    style: Bold Italic

  size: 12


# Colors (Tomorrow Night)
colors:
  # Default colors
  primary:
    background: '#151515'
    foreground: '#cccccc'
  # Normal colors
  normal:
    black:   '#2E3436'
    red:     '#FC4D44'
    green:   '#4E9A06'
    yellow:  '#C4A000'
    blue:    '#3465A4'
    magenta: '#75507B'
    cyan:    '#F57900'
    white:   '#BABDB9'
  # Bright colors
  bright:
    black:   '#555753'
    red:     '#EF2929'
    green:   '#8AE234'
    yellow:  '#FCE94F'
    blue:    '#729FCF'
    magenta: '#AD7FA8'
    cyan:    '#FCAF3E'
    white:   '#EEEEEC'
  dim:
    black:   '#131415'
    red:     '#864343'
    green:   '#777c44'
    yellow:  '#9e824c'
    blue:    '#556a7d'
    magenta: '#75617b'
    cyan:    '#5b7d78'
    white:   '#828482'

cursor:
  style:
    blinking: On

selection:
  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
# - Vi mode exclusive actions:
#
#   - Open
#       Perform the action of the first matching hint under the vi mode cursor
#       with `mouse.enabled` set to `true`.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#
# - Vi mode exclusive cursor motion actions:
#
#   - Up
#       One line up.
#   - Down
#       One line down.
#   - Left
#       One character left.
#   - Right
#       One character right.
#   - First
#       First column, or beginning of the line when already at the first column.
#   - Last
#       Last column, or beginning of the line when already at the last column.
#   - FirstOccupied
#       First non-empty cell in this terminal row, or first non-empty cell of
#       the line when already at the first cell of the row.
#   - High
#       Top of the screen.
#   - Middle
#       Center of the screen.
#   - Low
#       Bottom of the screen.
#   - SemanticLeft
#       Start of the previous semantically separated word.
#   - SemanticRight
#       Start of the next semantically separated word.
#   - SemanticLeftEnd
#       End of the previous semantically separated word.
#   - SemanticRightEnd
#       End of the next semantically separated word.
#   - WordLeft
#       Start of the previous whitespace separated word.
#   - WordRight
#       Start of the next whitespace separated word.
#   - WordLeftEnd
#       End of the previous whitespace separated word.
#   - WordRightEnd
#       End of the next whitespace separated word.
#   - Bracket
#       Character matching the bracket at the cursor's location.
#   - SearchNext
#       Beginning of the next match.
#   - SearchPrevious
#       Beginning of the previous match.
#   - SearchStart
#       Start of the match to the left of the vi mode cursor.
#   - SearchEnd
#       End of the match to the right of the vi mode cursor.
#
# - Search mode exclusive actions:
#   - SearchFocusNext
#       Move the focus to the next search match.
#   - SearchFocusPrevious
#       Move the focus to the previous search match.
#   - SearchConfirm
#   - SearchCancel
#   - SearchClear
#       Reset the search regex.
#   - SearchDeleteWord
#       Delete the last word in the search regex.
#   - SearchHistoryPrevious
#       Go to the previous regex in the search history.
#   - SearchHistoryNext
#       Go to the next regex in the search history.
#
# - Linux/BSD exclusive actions:
#
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Search
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
key_bindings:
  - { mods: Shift,   key: Insert,                       action: Paste            }
  - { mods: Control, key: Insert,                       action: Copy             }
  - { mods: Control, key: N,        mode: ~Alt,         action: SpawnNewInstance }

  # Defaults bindings
  #- {                key: Paste,                        action: Paste          }
  #- {                key: Copy,                         action: Copy           }
  #- { mods: Control, key: L,                            action: ClearLogNotice   }
  #- { mods: Control, key: L,        mode: ~Vi|~Search,  chars: "\x0c"            }
  #- { mods: Shift,   key: PageUp,   mode: ~Alt,         action: ScrollPageUp,    }
  #- { mods: Shift,   key: PageDown, mode: ~Alt,         action: ScrollPageDown   }
  #- { mods: Shift,   key: Home,     mode: ~Alt,         action: ScrollToTop,     }
  #- { mods: Shift,   key: End,      mode: ~Alt,         action: ScrollToBottom   }

  # Vi Mode
  #- { mods: Shift|Control, key: Space,  mode: ~Search,    action: ToggleViMode            }
  #- { mods: Shift|Control, key: Space,  mode: Vi|~Search, action: ScrollToBottom          }
  #- {                      key: Escape, mode: Vi|~Search, action: ClearSelection          }
  #- {                      key: I,      mode: Vi|~Search, action: ToggleViMode            }
  #- {                      key: I,      mode: Vi|~Search, action: ScrollToBottom          }
  #- { mods: Control,       key: C,      mode: Vi|~Search, action: ToggleViMode            }
  #- { mods: Control,       key: Y,      mode: Vi|~Search, action: ScrollLineUp            }
  #- { mods: Control,       key: E,      mode: Vi|~Search, action: ScrollLineDown          }
  #- {                      key: G,      mode: Vi|~Search, action: ScrollToTop             }
  #- { mods: Shift,         key: G,      mode: Vi|~Search, action: ScrollToBottom          }
  #- { mods: Control,       key: B,      mode: Vi|~Search, action: ScrollPageUp            }
  #- { mods: Control,       key: F,      mode: Vi|~Search, action: ScrollPageDown          }
  #- { mods: Control,       key: U,      mode: Vi|~Search, action: ScrollHalfPageUp        }
  #- { mods: Control,       key: D,      mode: Vi|~Search, action: ScrollHalfPageDown      }
  #- {                      key: Y,      mode: Vi|~Search, action: Copy                    }
  #- {                      key: Y,      mode: Vi|~Search, action: ClearSelection          }
  #- {                      key: Copy,   mode: Vi|~Search, action: ClearSelection          }
  #- {                      key: V,      mode: Vi|~Search, action: ToggleNormalSelection   }
  #- { mods: Shift,         key: V,      mode: Vi|~Search, action: ToggleLineSelection     }
  #- { mods: Control,       key: V,      mode: Vi|~Search, action: ToggleBlockSelection    }
  #- { mods: Alt,           key: V,      mode: Vi|~Search, action: ToggleSemanticSelection }
  #- {                      key: Return, mode: Vi|~Search, action: Open                    }
  #- {                      key: K,      mode: Vi|~Search, action: Up                      }
  #- {                      key: J,      mode: Vi|~Search, action: Down                    }
  #- {                      key: H,      mode: Vi|~Search, action: Left                    }
  #- {                      key: L,      mode: Vi|~Search, action: Right                   }
  #- {                      key: Up,     mode: Vi|~Search, action: Up                      }
  #- {                      key: Down,   mode: Vi|~Search, action: Down                    }
  #- {                      key: Left,   mode: Vi|~Search, action: Left                    }
  #- {                      key: Right,  mode: Vi|~Search, action: Right                   }
  #- {                      key: Key0,   mode: Vi|~Search, action: First                   }
  #- { mods: Shift,         key: Key4,   mode: Vi|~Search, action: Last                    }
  #- { mods: Shift,         key: Key6,   mode: Vi|~Search, action: FirstOccupied           }
  #- { mods: Shift,         key: H,      mode: Vi|~Search, action: High                    }
  #- { mods: Shift,         key: M,      mode: Vi|~Search, action: Middle                  }
  #- { mods: Shift,         key: L,      mode: Vi|~Search, action: Low                     }
  #- {                      key: B,      mode: Vi|~Search, action: SemanticLeft            }
  #- {                      key: W,      mode: Vi|~Search, action: SemanticRight           }
  #- {                      key: E,      mode: Vi|~Search, action: SemanticRightEnd        }
  #- { mods: Shift,         key: B,      mode: Vi|~Search, action: WordLeft                }
  #- { mods: Shift,         key: W,      mode: Vi|~Search, action: WordRight               }
  #- { mods: Shift,         key: E,      mode: Vi|~Search, action: WordRightEnd            }
  #- { mods: Shift,         key: Key5,   mode: Vi|~Search, action: Bracket                 }
  #- {                      key: Slash,  mode: Vi|~Search, action: SearchForward           }
  #- { mods: Shift,         key: Slash,  mode: Vi|~Search, action: SearchBackward          }
  #- {                      key: N,      mode: Vi|~Search, action: SearchNext              }
  #- { mods: Shift,         key: N,      mode: Vi|~Search, action: SearchPrevious          }

  # Search Mode
  #- {                key: Return, mode: Search|Vi,  action: SearchConfirm         }
  #- {                key: Escape, mode: Search,     action: SearchCancel          }
  #- { mods: Control, key: C,      mode: Search,     action: SearchCancel          }
  #- { mods: Control, key: U,      mode: Search,     action: SearchClear           }
  #- { mods: Control, key: W,      mode: Search,     action: SearchDeleteWord      }
  #- { mods: Control, key: P,      mode: Search,     action: SearchHistoryPrevious }
  #- { mods: Control, key: N,      mode: Search,     action: SearchHistoryNext     }
  #- {                key: Up,     mode: Search,     action: SearchHistoryPrevious }
  #- {                key: Down,   mode: Search,     action: SearchHistoryNext     }
  #- {                key: Return, mode: Search|~Vi, action: SearchFocusNext       }
  #- { mods: Shift,   key: Return, mode: Search|~Vi, action: SearchFocusPrevious   }

  # (Windows, Linux, and BSD only)
  #- { mods: Control|Shift, key: C,                                action: Copy             }
  #- { mods: Control|Shift, key: V,              mode: ~Vi,        action: Paste            }
  #- { mods: Control|Shift, key: F,              mode: ~Search,    action: SearchForward    }
  #- { mods: Control|Shift, key: B,              mode: ~Search,    action: SearchBackward   }
  #- { mods: Control|Shift, key: C,              mode: Vi|~Search, action: ClearSelection   }
  #- { mods: Shift,         key: Insert,                           action: PasteSelection   }
  #- { mods: Control,       key: Key0,                             action: ResetFontSize    }
  #- { mods: Control,       key: Equals,                           action: IncreaseFontSize }
  #- { mods: Control,       key: Plus,                             action: IncreaseFontSize }
  #- { mods: Control,       key: NumpadAdd,                        action: IncreaseFontSize }
  #- { mods: Control,       key: Minus,                            action: DecreaseFontSize }
  #- { mods: Control,       key: NumpadSubtract,                   action: DecreaseFontSize }
